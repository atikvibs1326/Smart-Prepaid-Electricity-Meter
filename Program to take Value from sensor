//arduino
#include <Filters.h>		// (Real Time Digital Signal Processing Library)
RunningStatitics is a class of <filters.h>
float testFrequency = 50;                     // test signal frequency (Hz)
float windowLength = 20.0/testFrequency;     // how long to average the signal, for statistist
int sensorValue = 0;
float intercept = -0.03; 	// to be adjusted based on calibration testing
float slope = 0.0200;		 // to be adjusted based on calibration testing
float current_amps; 			// estimated actual current in amps
//double total = 0.00001;
unsigned long printPeriod = 1000; 		// in milliseconds
// Track time in milliseconds since last reading 
unsigned long previousMillis = 0;

void setup() {
  Serial.begin( 9600 );    // start the serial port
  pinMode(4,OUTPUT);
  pinMode (A0,INPUT);
  digitalWrite(4,LOW);
}

void loop() {
  RunningStatistics inputStats;                 // create statistics to look at the raw test signal
  inputStats.setWindowSecs( windowLength );	setWindowsSec is property of <filters.h>	
inputstats.input is used to take sensor value as input on sensor

  while( true ) {
    sensorValue = analogRead(A0);  		// read the analog in value:
    inputStats.input(sensorValue);  		 // log to Stats function
       Object is created of the same by the name inputstat

    if((unsigned long)(millis() - previousMillis) >= printPeriod) { 
printperiod is used to track time in millliseconds to consume more units.
      previousMillis = millis();   // update time
     				 // display current values to the screen
millis() is function of <filters.h> used to count every second of the arduino
previousMillisecond is the last elasped value
      Serial.print( "\n" );
      // output sigma or variation values associated with the inputValue itself
     Serial.print( "\tsigma: " ); Serial.print( inputStats.sigma() );
      // convert signal sigma value to current in amps
      current_amps = intercept + slope * inputStats.sigma(); 	sigma() is  a function of arduino 
      Serial.print( "\tamps: " );
      Serial.print( abs(current_amps-0.01));
 abs() is mathematical function to find absolute value of current in ampere
      Serial.print( "\tWatt: " ); 
      Serial.print( 230*(current_amps));
      //total= total+(230*(current_amps)/3600);
      //Serial.print( "\tWattHour: " ); Serial.print( total,5);
    }
  }
}

